{
  "django_user": {
    "prefix": "djuser",
    "body": ["from django.contrib.auth.models import User"],
    "description": "Import django auth User model"
  },
  "python_print_exception": {
    "prefix": "pyexcept",
    "body": [
      "try:",
      "",
      "except Exception as e:",
      "    print($0)",
      "    raise e"
    ],
    "description": "Print an exception, but still raise it"
  },
  "print_with_name": {
    "prefix": "nprint",
    "body": ["print('$0', $0)"],
    "description": "print a variable preceded by the variable name"
  },
  "python_args_kwargs": {
    "prefix": "akw",
    "body": ["*args, **kwargs"],
    "description": "python argument destructuring"
  },
  "pdb": {
    "prefix": "pdb",
    "body": ["import pdb", "pdb.set_trace()"],
    "description": "Start the Python debugger"
  },
  "traceback": {
    "prefix": "traceback",
    "body": ["import traceback", "traceback.print_exc()"],
    "description": "Print the exception traceback"
  },
  "faker": {
    "prefix": "fk",
    "body": ["factory.Faker('$0')"],
    "description": "shortcut to FactoryBoy Faker wrapper"
  },
  "test_docstring": {
    "prefix": "given",
    "body": ["\"\"\"", "GIVEN $1", "WHEN $2", "THEN $3", "\"\"\""],
    "description": "template for python test docstring"
  },
  "structlog": {
    "prefix": "structlog",
    "body": ["import structlog", "logger = structlog.get_logger(__name__)"],
    "description": "Setup a structlog logger"
  },
  "time": {
    "prefix": "stime",
    "body": [
      "import time",
      "start_time = time.perf_counter()",
      "$TM_SELECTED_TEXT"
      "end_time = time.perf_counter()",
      "print(f'it took {(end_time - start_time):.2f}s')"
    ],
    "description": "measure time in python"
  },
  "RunPython": {
    "prefix": "runpython",
    "body": [
      "def forward(apps, schema_editor):",
      "    pass",
      "",
      "def backward(apps, schema_editor):",
      "    pass",
      "",
      "migrations.RunPython(forward, backward),"
    ],
    "description": "Template for django data migration"
  },
  "DjangoTimezone": {
    "prefix": "djtimezone",
    "body": [
      "from django.utils import timezone as dj_timezone"
    ],
    "description": "import django.utils.timezone as dj_timezone"
  },
  "try-except-breakpoint": {
    "prefix": "trybreakpoint",
    "body": [
      "try:",
      "    $TM_SELECTED_TEXT",
      "except Exception as exc:",
      "    breakpoint()",
      "    raise"
    ],
    "description": "put a generic try except with a breakpoint"
  }
}
